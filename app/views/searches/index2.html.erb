
<div class="bar-group">
  <a class="bar-link project" href="/nouislider/">noUiSlider</a>
  <a class="bar-link" href="/nouislider/slider-values/">Slider range and handles</a>
  <a class="bar-link" href="/nouislider/slider-read-write/">Reading &amp; Setting values</a>
  <a class="bar-link" href="/nouislider/slider-options/">Options</a>
  <a class="bar-link" href="/nouislider/behaviour-option/">Tapping, dragging &amp; fixed ranges</a>
  <a class="bar-link" href="/nouislider/examples/">Examples</a>
  <a class="bar-link" href="/nouislider/events-callbacks/">Events</a>
  <a class="bar-link" href="/nouislider/pips/">Scale/Pips</a>
  <a class="bar-link" href="/nouislider/more/">More...</a>
  <a class="bar-link download" href="/nouislider/download/">Download noUiSlider</a>
</div>

<div class="content">

  <section>
    <ul>
      <li><a href="#section-colorpicker">Colorpicker</a></li>
      <li><a href="#section-custom-connect">Using a custom connecting bar</a></li>
      <li><a href="#section-html5">Working with HTML5 input types</a></li>
      <li><a href="#section-non-linear">Using non linear ranges</a></li>
      <li><a href="#section-lock">Locking two sliders together</a></li>
      <li><a href="#section-keypress">Changing the slider value by keypress</a></li>
      <li><a href="#section-skipping">Skipping values on a slider</a></li>
      <li><a href="#section-huge-numbers">Working with huge numbers</a></li>
      <li><a href="#section-keyboard">Adding keyboard support</a></li>
      <li><a href="#section-dates">Using dates</a></li>
      <li><a href="#section-toggle">Create a toggle</a></li>
      <li><a href="#section-soft-limits">Block the edges of a slider</a></li>
    </ul>
  </section>


  <a href="#section-colorpicker" id="section-colorpicker" class="section-link">&sect;</a><h1>Colorpicker</h1>

  <section>

    <div class="view">

      <p>We'll initialize all sliders with the same options, and use the <code>slide</code> callback to keep to color in sync with the slider values. This callback fires when the slider is moved by sliding, or when it is clicked or tapped.</p>

      <div id="colorpicker">
        <div class="sliders" id="red"></div>
        <div class="sliders" id="green"></div>
        <div class="sliders" id="blue"></div>

        <div id="result"></div>

        <script>
            function setColor(){

                // Get the slider values,
                // stick them together.
                var color = 'rgb(' +
                        sliders[0].noUiSlider.get() + ',' +
                        sliders[1].noUiSlider.get() + ',' +
                        sliders[2].noUiSlider.get() + ')';

                // Fill the color box.
                resultElement.style.background = color;
                resultElement.style.color = color;
            }
        </script>
        <script>
            var resultElement = document.getElementById('result'),
                    sliders = document.getElementsByClassName('sliders');

            for ( var i = 0; i < sliders.length; i++ ) {

                noUiSlider.create(sliders[i], {
                    start: 127,
                    connect: "lower",
                    orientation: "vertical",
                    range: {
                        'min': 0,
                        'max': 255
                    },
                    format: wNumb({
                        decimals: 0
                    })
                });

                // Bind the color changing function
                // to the slide event.
                sliders[i].noUiSlider.on('slide', setColor);
            }
        </script>		</div>
    </div>

    <div class="side">

      <div class="viewer-header">The HTML</div>

      <div class="viewer-content">

<pre class="language-markup"><code>&lt;div id="colorpicker"&gt;
  &lt;div class="sliders" id="red"&gt;&lt;/div&gt;
  &lt;div class="sliders" id="green"&gt;&lt;/div&gt;
  &lt;div class="sliders" id="blue"&gt;&lt;/div&gt;

  &lt;div class="result"&gt;&lt;/div&gt;
  &lt;/div&gt;</code></pre>

      </div>

      <div class="viewer-header">The <code>setColor</code> function</div>

      <div class="viewer-content">
			
<pre><code>function setColor(){

  // Get the slider values,
  // stick them together.
  var color = 'rgb(' +
  sliders[0].noUiSlider.get() + ',' +
  sliders[1].noUiSlider.get() + ',' +
  sliders[2].noUiSlider.get() + ')';

  // Fill the color box.
  resultElement.style.background = color;
  resultElement.style.color = color;
  }
</code></pre>		</div>

      <div class="viewer-header">Initializing the slider</div>

      <div class="viewer-content">
			
<pre><code>var resultElement = document.getElementById('result'),
  sliders = document.getElementsByClassName('sliders');

  for ( var i = 0; i < sliders.length; i++ ) {

  noUiSlider.create(sliders[i], {
  start: 127,
  connect: "lower",
  orientation: "vertical",
  range: {
  'min': 0,
  'max': 255
  },
  format: wNumb({
  decimals: 0
  })
  });

  // Bind the color changing function
  // to the slide event.
  sliders[i].noUiSlider.on('slide', setColor);
  }
</code></pre>		</div>

      <div class="viewer-header">CSS</div>

      <div class="viewer-content">

        <style>#red, #green, #blue {
            margin: 10px;
            display: inline-block;
            height: 200px;
        }

        #colorpicker {
            height: 240px;
            width: 310px;
            margin: 0 auto;
            padding: 10px;
            border: 1px solid #BFBFBF;
        }

        #result {
            margin: 60px 26px;
            height: 100px;
            width: 100px;
            display: inline-block;
            vertical-align: top;
            color: rgb(127, 127, 127);
            background: rgb(127, 127, 127);
            border: 1px solid #fff;
            box-shadow: 0 0 10px;
        }

        #red {
            background: #c0392b;
        }

        #green {
            background: #27ae60;
        }

        #blue {
            background: #2980b9;
        }
        </style><pre class="language-css"><code>#red, #green, #blue {
        margin: 10px;
        display: inline-block;
        height: 200px;
        }

        #colorpicker {
        height: 240px;
        width: 310px;
        margin: 0 auto;
        padding: 10px;
        border: 1px solid #BFBFBF;
        }

        #result {
        margin: 60px 26px;
        height: 100px;
        width: 100px;
        display: inline-block;
        vertical-align: top;
        color: rgb(127, 127, 127);
        background: rgb(127, 127, 127);
        border: 1px solid #fff;
        box-shadow: 0 0 10px;
        }

        #red {
        background: #c0392b;
        }

        #green {
        background: #27ae60;
        }

        #blue {
        background: #2980b9;
        }
      </code></pre>		</div>

    </div>
  </section>


  <a href="#section-custom-connect" id="section-custom-connect" class="section-link">&sect;</a><h1>Custom connect</h1>

  <section>

    <div class="view">

      <p>When using the <code>connect</code> option, noUiSlider paints the connecting bar in the negative space between handles. This uses one less element and has some nice performance benefits. When you need more control over the connecting option, you can create a custom connecting bar using the <code>update</code> event.</p>

      <p>This custom element can be styled, or special features (like requested in <a href="https://github.com/leongersen/noUiSlider/issues/371">this issue</a>) can be implemented.</p>

      <div class="example">
        <div id="connect"></div>

        <script>
            var connectSlider = document.getElementById('connect');

            noUiSlider.create(connectSlider, {
                start: [20, 80],
                connect: false,
                range: {
                    'min': 0,
                    'max': 100
                }
            });
        </script>
        <script>
            var connectBar = document.createElement('div'),
                    connectBase = connectSlider.getElementsByClassName('noUi-base')[0],
                    connectHandles = connectSlider.getElementsByClassName('noUi-origin');

            // Give the bar a class for styling and add it to the slider.
            connectBar.className += 'connect';
            connectBase.appendChild(connectBar);

            connectSlider.noUiSlider.on('update', function( values, handle ) {

                // Pick left for the first handle, right for the second.
                var side = handle ? 'right' : 'left',
                // Get the handle position and trim the '%' sign.
                        offset = (connectHandles[handle].style.left).slice(0, - 1);

                // Right offset is 100% - left offset
                if ( handle === 1 ) {
                    offset = 100 - offset;
                }

                connectBar.style[side] = offset + '%';
            });
        </script>		</div>
    </div>

    <div class="side">

      <div class="viewer-header">Create the slider</div>

      <div class="viewer-content">
			
<pre><code>var connectSlider = document.getElementById('connect');

  noUiSlider.create(connectSlider, {
  start: [20, 80],
  connect: false,
  range: {
  'min': 0,
  'max': 100
  }
  });
</code></pre>		</div>


      <div class="viewer-header">Create a connecting bar and bind it</div>

      <div class="viewer-content">
			
<pre><code>var connectBar = document.createElement('div'),
  connectBase = connectSlider.getElementsByClassName('noUi-base')[0],
  connectHandles = connectSlider.getElementsByClassName('noUi-origin');

  // Give the bar a class for styling and add it to the slider.
  connectBar.className += 'connect';
  connectBase.appendChild(connectBar);

  connectSlider.noUiSlider.on('update', function( values, handle ) {

  // Pick left for the first handle, right for the second.
  var side = handle ? 'right' : 'left',
  // Get the handle position and trim the '%' sign.
  offset = (connectHandles[handle].style.left).slice(0, - 1);

  // Right offset is 100% - left offset
  if ( handle === 1 ) {
  offset = 100 - offset;
  }

  connectBar.style[side] = offset + '%';
  });
</code></pre>		</div>


      <div class="viewer-header">CSS for the connecting bar</div>

      <div class="viewer-content">

        <style>/* For this slider, disable the 'origin' size. */
        #connect .noUi-origin {
            right: auto;
            width: 0;
        }

        /* Position the bar and color it. */
        #connect .connect {
            position: absolute;
            top: 0;
            bottom: 0;
            background: #80C9F5;
            box-shadow: inset 0 0 3px rgba(51,51,51,0.45);
        }

        /* When the slider is moved by tap,
           transition the connect bar like the handle. */
        #connect.noUi-state-tap .connect {
            -webkit-transition: left 300ms, right 300ms;
            transition: left 300ms, right 300ms;
        }
        </style><pre class="language-css"><code>/* For this slider, disable the 'origin' size. */
        #connect .noUi-origin {
        right: auto;
        width: 0;
        }

        /* Position the bar and color it. */
        #connect .connect {
        position: absolute;
        top: 0;
        bottom: 0;
        background: #80C9F5;
        box-shadow: inset 0 0 3px rgba(51,51,51,0.45);
        }

        /* When the slider is moved by tap,
        transition the connect bar like the handle. */
        #connect.noUi-state-tap .connect {
        -webkit-transition: left 300ms, right 300ms;
        transition: left 300ms, right 300ms;
        }
      </code></pre>		</div>
    </div>
  </section>


  <a href="#section-html5" id="section-html5" class="section-link">&sect;</a><h1>Using HTML5 input elements</h1>

  <section>

    <div class="view">
      <p>noUiSlider is perfectly fine serializing values to any element with a <code>.val()</code> method, so lets try using <code>type="number"</code> and <code>&lt;select&gt;</code>.</p>
      <p>Note that if your browser doesn't support an input type, it will just assume <code>"text"</code>. If you'd like to know more, consider reading <a href="http://html5doctor.com/html5-forms-input-types/">this article</a>.</p>

      <p>We'll append <code>&lt;option&gt;</code> elements to the <code>&lt;select&gt;</code> dynamically.</p>

      <div class="example">
        <div id="html5"></div>
        <select id="input-select"></select>
        <input type="number" min="-20" max="40" step="1" id="input-number">

        <script>
            var select = document.getElementById('input-select');

            // Append the option elements
            for ( var i = -20; i <= 40; i++ ){

                var option = document.createElement("option");
                option.text = i;
                option.value = i;

                select.appendChild(option);
            }
        </script>
        <script>
            var html5Slider = document.getElementById('html5');

            noUiSlider.create(html5Slider, {
                start: [ 10, 30 ],
                connect: true,
                range: {
                    'min': -20,
                    'max': 40
                }
            });
        </script>
        <script>
            var inputNumber = document.getElementById('input-number');

            html5Slider.noUiSlider.on('update', function( values, handle ) {

                var value = values[handle];

                if ( handle ) {
                    inputNumber.value = value;
                } else {
                    select.value = Math.round(value);
                }
            });

            select.addEventListener('change', function(){
                html5Slider.noUiSlider.set([this.value, null]);
            });

            inputNumber.addEventListener('change', function(){
                html5Slider.noUiSlider.set([null, this.value]);
            });
        </script>		</div>
    </div>

    <div class="side">

      <div class="viewer-header">Appending <code>&lt;option&gt;</code> elements</div>

      <div class="viewer-content">
			
<pre><code>var select = document.getElementById('input-select');

  // Append the option elements
  for ( var i = -20; i &lt;= 40; i++ ){

  var option = document.createElement(&quot;option&quot;);
  option.text = i;
  option.value = i;

  select.appendChild(option);
  }
</code></pre>		</div>

      <div class="viewer-header">Initializing the slider</div>

      <div class="viewer-content">
			
<pre><code>var html5Slider = document.getElementById('html5');

  noUiSlider.create(html5Slider, {
  start: [ 10, 30 ],
  connect: true,
  range: {
  'min': -20,
  'max': 40
  }
  });
</code></pre>		</div>

      <div class="viewer-header">Linking the <code>&lt;select&gt;</code> and <code>&lt;input&gt;</code></div>

      <div class="viewer-content">
			
<pre><code>var inputNumber = document.getElementById('input-number');

  html5Slider.noUiSlider.on('update', function( values, handle ) {

  var value = values[handle];

  if ( handle ) {
  inputNumber.value = value;
  } else {
  select.value = Math.round(value);
  }
  });

  select.addEventListener('change', function(){
  html5Slider.noUiSlider.set([this.value, null]);
  });

  inputNumber.addEventListener('change', function(){
  html5Slider.noUiSlider.set([null, this.value]);
  });
</code></pre>		</div>

      <div class="viewer-header">Example CSS</div>

      <div class="viewer-content">

        <style>#input-select,
        #input-number {
            padding: 7px;
            margin: 15px 5px 5px;
            width: 70px;
        }
        </style><pre class="language-css"><code>#input-select,
        #input-number {
        padding: 7px;
        margin: 15px 5px 5px;
        width: 70px;
        }
      </code></pre>		</div>
    </div>
  </section>


  <a href="#section-non-linear" id="section-non-linear" class="section-link">&sect;</a><h1>Non linear slider</h1>

  <section>

    <div class="view">

      <p>One of noUiSlider's core features is the ability to divide the range in a non-linear fashion. Stepping can be applied, too! The example on the right shows where the handles are on the slider range in values and percentages.</p>

      <div class="example">
        <div id="nonlinear"></div>
        <span class="example-val" id="lower-value"></span>
        <span id="lower-offset"></span>
        <span class="example-val" id="upper-value"></span>
        <span id="upper-offset"></span>

        <script>
            var nonLinearSlider = document.getElementById('nonlinear');

            noUiSlider.create(nonLinearSlider, {
                connect: true,
                behaviour: 'tap',
                start: [ 500, 4000 ],
                range: {
                    // Starting at 500, step the value by 500,
                    // until 4000 is reached. From there, step by 1000.
                    'min': [ 0 ],
                    '10%': [ 500, 500 ],
                    '50%': [ 4000, 1000 ],
                    'max': [ 10000 ]
                }
            });
        </script>
        <script>
            // Write the CSS 'left' value to a span.
            function leftValue ( handle ) {
                return handle.parentElement.style.left;
            }

            var lowerValue = document.getElementById('lower-value'),
                    lowerOffset = document.getElementById('lower-offset'),
                    upperValue = document.getElementById('upper-value'),
                    upperOffset = document.getElementById('upper-offset'),
                    handles = nonLinearSlider.getElementsByClassName('noUi-handle');

            // Display the slider value and how far the handle moved
            // from the left edge of the slider.
            nonLinearSlider.noUiSlider.on('update', function ( values, handle ) {
                if ( !handle ) {
                    lowerValue.innerHTML = values[handle] + ', ' + leftValue(handles[handle]);
                } else {
                    upperValue.innerHTML = values[handle] + ', ' + leftValue(handles[handle]);
                }
            });
        </script>		</div>
    </div>

    <div class="side">

      <div class="viewer-header">Setting up the slider</div>

      <div class="viewer-content">
			
<pre><code>var nonLinearSlider = document.getElementById('nonlinear');

  noUiSlider.create(nonLinearSlider, {
  connect: true,
  behaviour: 'tap',
  start: [ 500, 4000 ],
  range: {
  // Starting at 500, step the value by 500,
  // until 4000 is reached. From there, step by 1000.
  'min': [ 0 ],
  '10%': [ 500, 500 ],
  '50%': [ 4000, 1000 ],
  'max': [ 10000 ]
  }
  });
</code></pre>		</div>

      <div class="viewer-header">Read the slider value and the left offset</div>

      <div class="viewer-content">
			
<pre><code>// Write the CSS 'left' value to a span.
  function leftValue ( handle ) {
  return handle.parentElement.style.left;
  }

  var lowerValue = document.getElementById('lower-value'),
  lowerOffset = document.getElementById('lower-offset'),
  upperValue = document.getElementById('upper-value'),
  upperOffset = document.getElementById('upper-offset'),
  handles = nonLinearSlider.getElementsByClassName('noUi-handle');

  // Display the slider value and how far the handle moved
  // from the left edge of the slider.
  nonLinearSlider.noUiSlider.on('update', function ( values, handle ) {
  if ( !handle ) {
  lowerValue.innerHTML = values[handle] + ', ' + leftValue(handles[handle]);
  } else {
  upperValue.innerHTML = values[handle] + ', ' + leftValue(handles[handle]);
  }
  });
</code></pre>		</div>
    </div>
  </section>


  <a href="#section-lock" id="section-lock" class="section-link">&sect;</a><h1>Locking sliders together</h1>

  <section>

    <div class="view">

      <p>Two cross-updating sliders can be created using a combination of the <code>change</code> and <code>slide</code> events.</p>

      <div class="example">
        <div class="slider" id="slider1"></div>
        <span class="example-val" id="slider1-span"></span>

        <div class="slider" id="slider2"></div>
        <span class="example-val" id="slider2-span"></span>

        <button id="lockbutton" style="float: right; margin: 20px 0 0;">Lock</button>


        <script>
            // Store the locked state and slider values.
            var lockedState = false,
                    lockedSlider = false,
                    lockedValues = [60, 80],
                    slider1 = document.getElementById('slider1'),
                    slider2 = document.getElementById('slider2'),
                    lockButton = document.getElementById('lockbutton'),
                    slider1Value = document.getElementById('slider1-span'),
                    slider2Value = document.getElementById('slider2-span');

            // When the button is clicked, the locked
            // state is inverted.
            lockButton.addEventListener('click', function(){
                lockedState = !lockedState;
                this.textContent = lockedState ? 'unlock' : 'lock';
            });
        </script>
        <script>
            noUiSlider.create(slider1, {
                start: 60,

                // Disable animation on value-setting,
                // so the sliders respond immediately.
                animate: false,
                range: {
                    min: 50,
                    max: 100
                }
            });

            noUiSlider.create(slider2, {
                start: 80,
                animate: false,
                range: {
                    min: 50,
                    max: 100
                }
            });

            slider1.noUiSlider.on('update', function( values, handle ){
                slider1Value.innerHTML = values[handle];
            });

            slider2.noUiSlider.on('update', function( values, handle ){
                slider2Value.innerHTML = values[handle];
            });
        </script>
        <script>
            function setLockedValues ( ) {
                lockedValues = [
                    Number(slider1.noUiSlider.get()),
                    Number(slider2.noUiSlider.get())
                ];
            }

            slider1.noUiSlider.on('change', setLockedValues);
            slider2.noUiSlider.on('change', setLockedValues);

            // The value will be send to the other slider,
            // using a custom function as the serialization
            // method. The function uses the global 'lockedState'
            // variable to decide whether the other slider is updated.
            slider1.noUiSlider.on('slide', function( values, handle ){
                crossUpdate(values[handle], slider2);
            });

            slider2.noUiSlider.on('slide', function( values, handle ){
                crossUpdate(values[handle], slider1);
            });
        </script>
        <script>
            function crossUpdate ( value, slider ) {

                // If the sliders aren't interlocked, don't
                // cross-update.
                if ( !lockedState ) return;

                // Select whether to increase or decrease
                // the other slider value.
                var a = slider1 === slider ? 0 : 1, b = a ? 0 : 1;

                // Offset the slider value.
                value -= lockedValues[b] - lockedValues[a];

                // Set the value
                slider.noUiSlider.set(value);
            }
        </script>		</div>
    </div>

    <div class="side">

      <div class="viewer-header">Setup and button clicks</div>

      <div class="viewer-content">
			
<pre><code>// Store the locked state and slider values.
  var lockedState = false,
  lockedSlider = false,
  lockedValues = [60, 80],
  slider1 = document.getElementById('slider1'),
  slider2 = document.getElementById('slider2'),
  lockButton = document.getElementById('lockbutton'),
  slider1Value = document.getElementById('slider1-span'),
  slider2Value = document.getElementById('slider2-span');

  // When the button is clicked, the locked
  // state is inverted.
  lockButton.addEventListener('click', function(){
  lockedState = !lockedState;
  this.textContent = lockedState ? 'unlock' : 'lock';
  });
</code></pre>		</div>

      <div class="viewer-header">The <code>Crossupdate</code> function</div>

      <div class="viewer-content">
			
<pre><code>function crossUpdate ( value, slider ) {

  // If the sliders aren't interlocked, don't
  // cross-update.
  if ( !lockedState ) return;

  // Select whether to increase or decrease
  // the other slider value.
  var a = slider1 === slider ? 0 : 1, b = a ? 0 : 1;

  // Offset the slider value.
  value -= lockedValues[b] - lockedValues[a];

  // Set the value
  slider.noUiSlider.set(value);
  }
</code></pre>		</div>

      <div class="viewer-header">Initializing the sliders</div>

      <div class="viewer-content">
			
<pre><code>noUiSlider.create(slider1, {
  start: 60,

  // Disable animation on value-setting,
  // so the sliders respond immediately.
  animate: false,
  range: {
  min: 50,
  max: 100
  }
  });

  noUiSlider.create(slider2, {
  start: 80,
  animate: false,
  range: {
  min: 50,
  max: 100
  }
  });

  slider1.noUiSlider.on('update', function( values, handle ){
  slider1Value.innerHTML = values[handle];
  });

  slider2.noUiSlider.on('update', function( values, handle ){
  slider2Value.innerHTML = values[handle];
  });
</code></pre>		</div>

      <div class="viewer-header">Linking the sliders together</div>

      <div class="viewer-content">
			
<pre><code>function setLockedValues ( ) {
  lockedValues = [
  Number(slider1.noUiSlider.get()),
  Number(slider2.noUiSlider.get())
  ];
  }

  slider1.noUiSlider.on('change', setLockedValues);
  slider2.noUiSlider.on('change', setLockedValues);

  // The value will be send to the other slider,
  // using a custom function as the serialization
  // method. The function uses the global 'lockedState'
  // variable to decide whether the other slider is updated.
  slider1.noUiSlider.on('slide', function( values, handle ){
  crossUpdate(values[handle], slider2);
  });

  slider2.noUiSlider.on('slide', function( values, handle ){
  crossUpdate(values[handle], slider1);
  });
</code></pre>		</div>
    </div>
  </section>


  <a href="#section-keypress" id="section-keypress" class="section-link">&sect;</a><h1>Changing the slider by keypress</h1>

  <section>

    <div class="view">

      <p>To keep the library small, features like keyboard interaction haven't been included. However, adding features to input fields linked to a slider is easy. noUiSlider provides API's to help you. In this example, pressing the keyboard arrow keys will increase/decrease the slider by one step.</p>

      <p>This example uses the <code>'step'</code> API to determine by how much the slider should be changed. You don't need this function if your slider is linear. In that case, increase/decrease the value with the ammount of your <code>step</code>.</p>

      <p>We'll listen to keydown on the <code>'#input-with-keypress'</code> element, and pass the event to a function so we can read the code that identifies the key.</p>

      <p>Note that the slider value will be a <code>string</code>, so we'll need to parse it to an integer.</p>

      <div class="example">
        <div id="keypress"></div>
        <input type="text" id="input-with-keypress">

        <script>
            var slider = document.getElementById('keypress'),
                    input = document.getElementById('input-with-keypress');

            noUiSlider.create(slider, {
                start: 40,
                step: 10,
                range: {
                    'min': 0,
                    '20%': [ 300, 100 ],
                    '50%': [ 800, 50 ],
                    'max': 1000
                }
            });

            slider.noUiSlider.on('update', function( values, handle ) {
                input.value = values[handle];
            });

            input.addEventListener('change', function(){
                slider.noUiSlider.set([null, this.value]);
            });
        </script>
        <script>
            // Listen to keydown events on the input field.
            input.addEventListener('keydown', function( e ) {

                // Convert the string to a number.
                var value = Number( slider.noUiSlider.get() ),
                        sliderStep = slider.noUiSlider.steps()

                // Select the stepping for the first handle.
                sliderStep = sliderStep[0];

                // 13 is enter,
                // 38 is key up,
                // 40 is key down.
                switch ( e.which ) {
                    case 13:
                        slider.noUiSlider.set(this.value);
                        break;
                    case 38: slider.noUiSlider.set( value + sliderStep[1] );
                        break;
                    case 40: slider.noUiSlider.set( value - sliderStep[0] );
                        break;
                }
            });
        </script>		</div>
    </div>

    <div class="side">

      <div class="viewer-header">Initializing the slider and linking the input</div>

      <div class="viewer-content">
			
<pre><code>var slider = document.getElementById('keypress'),
  input = document.getElementById('input-with-keypress');

  noUiSlider.create(slider, {
  start: 40,
  step: 10,
  range: {
  'min': 0,
  '20%': [ 300, 100 ],
  '50%': [ 800, 50 ],
  'max': 1000
  }
  });

  slider.noUiSlider.on('update', function( values, handle ) {
  input.value = values[handle];
  });

  input.addEventListener('change', function(){
  slider.noUiSlider.set([null, this.value]);
  });
</code></pre>		</div>

      <div class="viewer-header">Listen to <code>keypress</code> on the input</div>

      <div class="viewer-content">
			
<pre><code>// Listen to keydown events on the input field.
  input.addEventListener('keydown', function( e ) {

  // Convert the string to a number.
  var value = Number( slider.noUiSlider.get() ),
  sliderStep = slider.noUiSlider.steps()

  // Select the stepping for the first handle.
  sliderStep = sliderStep[0];

  // 13 is enter,
  // 38 is key up,
  // 40 is key down.
  switch ( e.which ) {
  case 13:
  slider.noUiSlider.set(this.value);
  break;
  case 38: slider.noUiSlider.set( value + sliderStep[1] );
  break;
  case 40: slider.noUiSlider.set( value - sliderStep[0] );
  break;
  }
  });
</code></pre>		</div>

    </div>
  </section>


  <a href="#section-skipping" id="section-skipping" class="section-link">&sect;</a><h1>Skipping steps</h1>

  <section>

    <div class="view">
      <p>When using a stepped slider, your configuration may require that certain steps aren't available. Using the <code>snap</code> feature, this effect can be created.</p>
      <p>Notice how <code>40</code> and <code>80</code> can't be selected on the slider.</p>

      <div class="example">
        <div id="skipstep"></div>
        <span class="example-val" id="skip-value-lower"></span>
        <span class="example-val" id="skip-value-upper"></span>

        <script>
            var skipSlider = document.getElementById('skipstep');

            noUiSlider.create(skipSlider, {
                range: {
                    'min': 0,
                    '10%': 10,
                    '20%': 20,
                    '30%': 30,
                    // Nope, 40 is no fun.
                    '50%': 50,
                    '60%': 60,
                    '70%': 70,
                    // I never liked 80.
                    '90%': 90,
                    'max': 100
                },
                snap: true,
                start: [20, 90]
            });
        </script>
        <script>
            var skipValues = [
                document.getElementById('skip-value-lower'),
                document.getElementById('skip-value-upper')
            ];

            skipSlider.noUiSlider.on('update', function( values, handle ) {
                skipValues[handle].innerHTML = values[handle];
            });
        </script>		</div>
    </div>

    <div class="side">

      <div class="viewer-header">Initialize a snapping slider</div>

      <div class="viewer-content">
			
<pre><code>var skipSlider = document.getElementById('skipstep');

  noUiSlider.create(skipSlider, {
  range: {
  'min': 0,
  '10%': 10,
  '20%': 20,
  '30%': 30,
  // Nope, 40 is no fun.
  '50%': 50,
  '60%': 60,
  '70%': 70,
  // I never liked 80.
  '90%': 90,
  'max': 100
  },
  snap: true,
  start: [20, 90]
  });
</code></pre>		</div>

      <div class="viewer-header">Read the slider values</div>

      <div class="viewer-content">
			
<pre><code>var skipValues = [
  document.getElementById('skip-value-lower'),
  document.getElementById('skip-value-upper')
  ];

  skipSlider.noUiSlider.on('update', function( values, handle ) {
  skipValues[handle].innerHTML = values[handle];
  });
</code></pre>		</div>
    </div>
  </section>


  <a href="#section-huge-numbers" id="section-huge-numbers" class="section-link">&sect;</a><h1>Using the slider with huge numbers</h1>

  <section>

    <div class="view">

      <p>If you are working with arbitrarily large numbers, you should <strong>not use these directly in noUiSlider</strong>, as you'll run into some JavaScript limitations. Instead, you should <strong>map</strong> your values to an <code>array</code>.</p>

      <p>Numbers is JavaScript are <a href="">Double Precision Floats</a>, which can store numbers up to 2^53 <em>(9007199254740992)</em> precisely. For reference, see <a href="http://stackoverflow.com/questions/15529337/prevent-javascript-number-function-from-rounding-big-numbers">this StackOverflow question</a>, or <a href="https://github.com/leongersen/noUiSlider/issues/427">issue #427 filed on GitHub</a>.</p>

      <p>As an example, see the <code>'range'</code> option for a RAM selector offering 14 steps from 512MB to 8GB. The <code>'step'</code> are ommited for clarity. The values are provided as bytes. A better solution would be to abstract the byte values away from the slider, looking up the byte values in an array. This keeps the slider configuration simple and prevents issues with floating point precision.</p>

      <p><em>(These values fit within the limit just fine, but demonstrate the point really well!)</em></p>

      <div class="example">
        <div id="slider-huge"></div>
        <span class="example-val" id="huge-value"></span>

        <script>
            var bigValueSlider = document.getElementById('slider-huge'),
                    bigValueSpan = document.getElementById('huge-value');

            noUiSlider.create(bigValueSlider, {
                start: 0,
                step: 1,
                format: wNumb({
                    decimals: 0
                }),
                range: {
                    min: 0,
                    max: 13
                }
            });
        </script>
        <script>
            // Note how these are 'string' values, not numbers.
            var range = [
                '0','2097152','4194304',
                '8388608','16777216','33554432',
                '67108864','134217728','268435456',
                '536870912','1073741824',
                '2147483648','4294967296',
                '8589934592'
            ];

            bigValueSlider.noUiSlider.on('update', function ( values, handle ) {
                bigValueSpan.innerHTML = range[values[handle]];
            });
        </script>		</div>
    </div>

    <div class="side">

		
<pre><code>range: {
  'min': 0,
  '7.6%': 2097152,
  '15.3%': 4194304,
  '23.0%': 8388608,
  '30.7%': 16777216,
  '38.4%': 33554432,
  '46.1%': 67108864,
  '53.8%': 134217728,
  '61.5%': 268435456,
  '69.2%': 536870912,
  '76.9%': 1073741824,
  '84.6%': 2147483648,
  '92.3%': 4294967296,
  'max': 8589934592
  }
</code></pre>
      <div class="viewer-header">Setup</div>

      <div class="viewer-content">
			
<pre><code>var bigValueSlider = document.getElementById('slider-huge'),
  bigValueSpan = document.getElementById('huge-value');

  noUiSlider.create(bigValueSlider, {
  start: 0,
  step: 1,
  format: wNumb({
  decimals: 0
  }),
  range: {
  min: 0,
  max: 13
  }
  });
</code></pre>		</div>

		
<pre><code>// Note how these are 'string' values, not numbers.
  var range = [
  '0','2097152','4194304',
  '8388608','16777216','33554432',
  '67108864','134217728','268435456',
  '536870912','1073741824',
  '2147483648','4294967296',
  '8589934592'
  ];

  bigValueSlider.noUiSlider.on('update', function ( values, handle ) {
  bigValueSpan.innerHTML = range[values[handle]];
  });
</code></pre>
    </div>
  </section>


  <a href="#section-keyboard" id="section-keyboard" class="section-link">&sectsect;</a><h1>Adding keyboard support</h1>

  <section>

    <div class="view">

      <p>Much like the keypress example, handles can be made keyboard-focusable.</p>

      <div class="example">
        <input placeholder="Hit tab to focus on the handle." style="width: 100%">
        <div id="keyboard"></div>

        <script>
            var slider = document.getElementById('keyboard');

            noUiSlider.create(slider, {
                start: 10,
                step: 10,
                range: {
                    'min': 0,
                    'max': 100
                }
            });
        </script>
        <script>
            var handle = slider.querySelector('.noUi-origin');

            handle.setAttribute('tabindex', 0);

            handle.addEventListener('click', function(){
                this.focus();
            });

            handle.addEventListener('keydown', function( e ) {

                var value = Number( slider.noUiSlider.get() );

                switch ( e.which ) {
                    case 37: slider.noUiSlider.set( value - 10 );
                        break;
                    case 39: slider.noUiSlider.set( value + 10 );
                        break;
                }
            });
        </script>		</div>
    </div>

    <div class="side">

      <div class="viewer-header">Initializing the slider</div>

      <div class="viewer-content">
			
<pre><code>var slider = document.getElementById('keyboard');

  noUiSlider.create(slider, {
  start: 10,
  step: 10,
  range: {
  'min': 0,
  'max': 100
  }
  });
</code></pre>		</div>

      <div class="viewer-header">Listen to <code>keypress</code> on the handle</div>

      <div class="viewer-content">
			
<pre><code>var handle = slider.querySelector('.noUi-origin');

  handle.setAttribute('tabindex', 0);

  handle.addEventListener('click', function(){
  this.focus();
  });

  handle.addEventListener('keydown', function( e ) {

  var value = Number( slider.noUiSlider.get() );

  switch ( e.which ) {
  case 37: slider.noUiSlider.set( value - 10 );
  break;
  case 39: slider.noUiSlider.set( value + 10 );
  break;
  }
  });
</code></pre>		</div>

      <div class="viewer-header">CSS</div>

      <div class="viewer-content">

        <style>.noUi-origin:focus .noUi-handle {
            box-shadow: 0 0 5px orange;
        }
        </style><pre class="language-css"><code>.noUi-origin:focus .noUi-handle {
        box-shadow: 0 0 5px orange;
        }
      </code></pre>		</div>

    </div>
  </section>


  <a href="#section-dates" id="section-dates" class="section-link">&sect;</a><h1>Working with dates</h1>

  <section>

    <div class="view">

      <p>As all dates in JavaScript can be represented as time, noUiSlider can handle them, too. This example will show you how to convert dates to numerical ranges, and then use the <code>update</code> event to display them in a pretty format.</p>

      <p>We'll be creating timestamps from strings. In order to do this easily, we'll define a new helper function. This function accepts a string, creates a <code>new Date</code> and then returns it as a timestamp.</p>

      <p>In in overview below you'll find the code used to run this example. For readability, all <strong>helper</strong> functions have been moved into their own tab.</p>

      <div class="example">
        <div id="slider-date"></div>
        <span class="example-val" id="event-start"></span>
        <span class="example-val" id="event-end"></span>

        <script>
            // Create a new date from a string, return as a timestamp.
            function timestamp(str){
                return new Date(str).getTime();
            }
        </script>
        <script>
            // Create a list of day and monthnames.
            var
                    weekdays = [
                        "Sunday", "Monday", "Tuesday",
                        "Wednesday", "Thursday", "Friday",
                        "Saturday"
                    ],
                    months = [
                        "January", "February", "March",
                        "April", "May", "June", "July",
                        "August", "September", "October",
                        "November", "December"
                    ];

            // Append a suffix to dates.
            // Example: 23 => 23rd, 1 => 1st.
            function nth (d) {
                if(d>3 && d<21) return 'th';
                switch (d % 10) {
                    case 1:  return "st";
                    case 2:  return "nd";
                    case 3:  return "rd";
                    default: return "th";
                }
            }

            // Create a string representation of the date.
            function formatDate ( date ) {
                return weekdays[date.getDay()] + ", " +
                        date.getDate() + nth(date.getDate()) + " " +
                        months[date.getMonth()] + " " +
                        date.getFullYear();
            }
        </script>
        <script>
            var dateSlider = document.getElementById('slider-date');

            noUiSlider.create(dateSlider, {
// Create two timestamps to define a range.
                range: {
                    min: timestamp('2010'),
                    max: timestamp('2016')
                },

// Steps of one week
                step: 7 * 24 * 60 * 60 * 1000,

// Two more timestamps indicate the handle starting positions.
                start: [ timestamp('2011'), timestamp('2015') ],

// No decimals
                format: wNumb({
                    decimals: 0
                })
            });
        </script>
        <script>
            var dateValues = [
                document.getElementById('event-start'),
                document.getElementById('event-end')
            ];

            dateSlider.noUiSlider.on('update', function( values, handle ) {
                dateValues[handle].innerHTML = formatDate(new Date(+values[handle]));
            });
        </script>		</div>
    </div>

    <div class="side">

      <div class="viewer-header">Timestamps</div>

      <div class="viewer-content">
			
<pre><code>// Create a new date from a string, return as a timestamp.
  function timestamp(str){
  return new Date(str).getTime();
  }
</code></pre>		</div>

      <div class="viewer-header">Setup</div>

      <div class="viewer-content">
			
<pre><code>var dateSlider = document.getElementById('slider-date');

  noUiSlider.create(dateSlider, {
  // Create two timestamps to define a range.
  range: {
  min: timestamp('2010'),
  max: timestamp('2016')
  },

  // Steps of one week
  step: 7 * 24 * 60 * 60 * 1000,

  // Two more timestamps indicate the handle starting positions.
  start: [ timestamp('2011'), timestamp('2015') ],

  // No decimals
  format: wNumb({
  decimals: 0
  })
  });
</code></pre>		</div>

      <div class="viewer-header">Slider control</div>

      <div class="viewer-content">
			
<pre><code>var dateValues = [
  document.getElementById('event-start'),
  document.getElementById('event-end')
  ];

  dateSlider.noUiSlider.on('update', function( values, handle ) {
  dateValues[handle].innerHTML = formatDate(new Date(+values[handle]));
  });
</code></pre>		</div>

      <div class="viewer-header">Helper functions and formatting</div>

      <div class="viewer-content">
        <p>The <code>nth</code> function was borrowed from <a onclick="return trackLink(this, 'outlink','stackoverflow nth')" href="http://stackoverflow.com/questions/15397372/javascript-new-date-ordinal-st-nd-rd-th">this StackOverflow question</a>.</p>
			
<pre><code>// Create a list of day and monthnames.
  var
  weekdays = [
  "Sunday", "Monday", "Tuesday",
  "Wednesday", "Thursday", "Friday",
  "Saturday"
  ],
  months = [
  "January", "February", "March",
  "April", "May", "June", "July",
  "August", "September", "October",
  "November", "December"
  ];

  // Append a suffix to dates.
  // Example: 23 => 23rd, 1 => 1st.
  function nth (d) {
  if(d>3 && d<21) return 'th';
  switch (d % 10) {
  case 1:  return "st";
  case 2:  return "nd";
  case 3:  return "rd";
  default: return "th";
  }
  }

  // Create a string representation of the date.
  function formatDate ( date ) {
  return weekdays[date.getDay()] + ", " +
  date.getDate() + nth(date.getDate()) + " " +
  months[date.getMonth()] + " " +
  date.getFullYear();
  }
</code></pre>		</div>
    </div>
  </section>


  <a href="#section-toggle" id="section-toggle" class="section-link">&sect;</a><h1>Creating a toggle</h1>

  <section>

    <div class="view">

      <p>Many application interfaces have options that can be turned on or off using switches. noUiSlider is well suited for this, especially because of the wide touch support.</p>

      <p>The <code>update</code> event can be used to keep track of changes to the handle. We'll set the range to <code>[0, 1]</code>, which leaves one step of <code>1</code>.</p>

      <div class="example vertical">
        <div id="slider-toggle"></div>

        <script>
            var toggleSlider = document.getElementById('slider-toggle');

            noUiSlider.create(toggleSlider, {
                orientation: "vertical",
                start: 0,
                range: {
                    'min': [0, 1],
                    'max': 1
                },
                format: wNumb({
                    decimals: 0
                })
            })

            toggleSlider.noUiSlider.on('update', function( values, handle ){
                if ( values[handle] === '1' ) {
                    toggleSlider.className += ' off';
                } else {
                    toggleSlider.className = toggleSlider.className.slice(0, -4);
                }
            });
        </script>		</div>
    </div>

    <div class="side">

      <div class="viewer-header">Toggle</div>

      <div class="viewer-content">
			
<pre><code>var toggleSlider = document.getElementById('slider-toggle');

  noUiSlider.create(toggleSlider, {
  orientation: "vertical",
  start: 0,
  range: {
  'min': [0, 1],
  'max': 1
  },
  format: wNumb({
  decimals: 0
  })
  })

  toggleSlider.noUiSlider.on('update', function( values, handle ){
  if ( values[handle] === '1' ) {
  toggleSlider.className += ' off';
  } else {
  toggleSlider.className = toggleSlider.className.slice(0, -4);
  }
  });
</code></pre>		</div>

      <div class="viewer-header">CSS</div>

      <div class="viewer-content">

        <style>#slider-toggle {
            height: 50px;
        }
        #slider-toggle.off .noUi-handle {
            border-color: red;
        }
        </style><pre class="language-css"><code>#slider-toggle {
        height: 50px;
        }
        #slider-toggle.off .noUi-handle {
        border-color: red;
        }
      </code></pre>		</div>

    </div>
  </section>


  <a href="#section-soft-limits" id="section-soft-limits" class="section-link">&sect;</a><h1>Soft limits</h1>

  <section>

    <div class="view">

      <p>If you want to disable the edges of a slider, the set event can be used to reset the value if a limit is passed. Note how the handle 'bounces back' when it is released below <code>20</code> or above <code>80</code>. noUiSlider doesn't support disabling edges altogether, but this effect might be created visually by <a href="/nouislider/more#section-styling">setting padding</a> on the slider.</p>

      <div class="example">
        <div id="soft"></div>

        <script>
            var softSlider = document.getElementById('soft');

            noUiSlider.create(softSlider, {
                start: 50,
                range: {
                    min: 0,
                    max: 100
                },
                pips: {
                    mode: 'values',
                    values: [20, 80],
                    density: 4
                }
            });
        </script>
        <script>
            softSlider.noUiSlider.on('change', function ( values, handle ) {
                if ( values[handle] < 20 ) {
                    softSlider.noUiSlider.set(20);
                } else if ( values[handle] > 80 ) {
                    softSlider.noUiSlider.set(80);
                }
            });
        </script>		</div>
    </div>

    <div class="side">

      <div class="viewer-header">Setting up the slider</div>

      <div class="viewer-content">
			
<pre><code>var softSlider = document.getElementById('soft');

  noUiSlider.create(softSlider, {
  start: 50,
  range: {
  min: 0,
  max: 100
  },
  pips: {
  mode: 'values',
  values: [20, 80],
  density: 4
  }
  });
</code></pre>		</div>

      <div class="viewer-header">Resetting using the <code>set</code> event</div>

      <div class="viewer-content">
			
<pre><code>softSlider.noUiSlider.on('change', function ( values, handle ) {
  if ( values[handle] < 20 ) {
  softSlider.noUiSlider.set(20);
  } else if ( values[handle] > 80 ) {
  softSlider.noUiSlider.set(80);
  }
  });
</code></pre>		</div>
    </div>
  </section>
</div>

<script>

    var headers = document.getElementsByClassName('viewer-header');

    for ( var i = 0; i < headers.length; i++ ) {
        headers[i].addEventListener('click', function(){
            this.classList.toggle('open');
        });
    }

</script>

<script src="/nouislider/documentation/assets/prism.js"></script>

